@page "/myprofile"
@using StudentRecruitment.Presentation.Models
@using StudentRecruitment.Presentation.Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject TokenService TokenService

<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="w-100" style="max-width: 600px;">
        @if (isLoading)
        {
            <p>Loading...</p>
        }
        else if (studentWithGrades != null && groupedGrades != null)
        {
            <div>
                <h4>@studentWithGrades.Name @studentWithGrades.Surname</h4>
                <p><strong>Description:</strong> @studentWithGrades.Description</p>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Update description" @bind="newDescription" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" @onclick="UpdateDescription">Update</button>
                    </div>
                </div>
                <p><strong>Birth Date:</strong> @studentWithGrades.BirthDate.ToString("yyyy-MM-dd")</p>
                <p><strong>Email:</strong> @studentWithGrades.Email</p>

                <div class="d-flex align-items-center">
                    <div>
                        Your profile is
                        <span class="@ProfileStatusClass">
                            <strong>@ProfileStatusText</strong>
                        </span>
                    </div>
                    <div class="form-check form-switch ms-3">
                        <input type="checkbox" class="form-check-input" id="publicProfileCheck" @bind="studentWithGrades.IsPublicProfile" @bind:after="UpdateIsPublicProfile">
                        <label class="form-check-label" for="publicProfileCheck">Public Profile</label>
                    </div>
                </div>

                @foreach (var semester in groupedGrades.Keys.OrderByDescending(k => k))
                {
                    <article>
                        <h5>Semester @semester</h5>
                        <ul>
                            @foreach (var grade in groupedGrades[semester])
                            {
                                <li>
                                    <strong>@grade.SubjectName:</strong> @grade.Grade
                                </li>
                            }
                        </ul>
                    </article>
                }
            </div>
        }
        else if (!isLoading)
        {
            <p>No data found or error occurred.</p>
        }
    </div>
</div>

@code {
    private int inputStudentId;
    private StudentWithGradesModel studentWithGrades;
    private Dictionary<int, List<SemesterGrade>> groupedGrades;
    private bool isLoading;
    private string newDescription;
    private bool isInitialized = false;

    protected override void OnInitialized()
    {
        isInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isInitialized)
        {
            inputStudentId = await TokenService.GetUserIdAsync();
            if (inputStudentId > 0)
            {
                await LoadStudentData();
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
            isInitialized = false;
            StateHasChanged();
        }
    }

    private async Task LoadStudentData()
    {
        isLoading = true;
        studentWithGrades = null;
        groupedGrades = new Dictionary<int, List<SemesterGrade>>();

        try
        {
            studentWithGrades = await Http.GetFromJsonAsync<StudentWithGradesModel>($"api/student/{inputStudentId}/grades");
            if (studentWithGrades?.SemesterGrades != null)
            {
                groupedGrades = studentWithGrades.SemesterGrades
                    .GroupBy(g => g.Semester)
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (Exception ex)
        {
            throw;
        }

        isLoading = false;
    }

    private async Task UpdateDescription()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/student/{inputStudentId}/description", newDescription);
            if (response.IsSuccessStatusCode)
            {
                studentWithGrades.Description = newDescription;
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task UpdateIsPublicProfile()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/student/{inputStudentId}/is-public-profile", studentWithGrades.IsPublicProfile);
            if (!response.IsSuccessStatusCode)
            {
                studentWithGrades.IsPublicProfile = !studentWithGrades.IsPublicProfile;
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private string ProfileStatusText => studentWithGrades.IsPublicProfile ? "public" : "private";
    private string ProfileStatusClass => studentWithGrades.IsPublicProfile ? "text-success" : "text-danger";
}
