@page "/admin"
@using System.Net.Http.Json
@using StudentRecruitment.Shared.DTOs
@inject HttpClient Http

<h3>Admin Page</h3>

<div class="operation-container">
    @* Import subjects card *@
    <div class="operation-card import-subjects">
        <div class="operation-header">
            <h4>Import subjects data</h4>
        </div>
        <div class="operation-body">
            <p>Import subjects from the provided JSON file.</p>
            <div class="button-container">
                <button class="btn btn-primary" @onclick="ImportSubjects">Import</button>
            </div>
            <div class="mt-2">
                @if (subjectImportMessage != null)
                {
                    <div class="alert alert-info">@subjectImportMessage</div>
                }
            </div>
        </div>
    </div>

    @* Import students card *@
    <div class="operation-card import-students">
        <div class="operation-header">
            <h4>Import students data</h4>
        </div>
        <div class="operation-body">
            <p>Import students from the provided JSON file and create accounts.</p>
            <div class="button-container">
                <button class="btn btn-primary" @onclick="ImportStudents">Import</button>
            </div>
            <div class="mt-2">
                @if (studentImportMessage != null)
                {
                    <div class="alert alert-info">@studentImportMessage</div>
                }
            </div>
        </div>
    </div>

    @* Delete students card *@
    <div class="operation-card delete-students">
        <div class="operation-header">
            <h4>Clear students data</h4>
        </div>
        <div class="operation-body">
            <p>This action will delete all students from the database.</p>
            <div class="button-container">
                <button class="btn btn-danger" @onclick="DeleteAllStudents">Delete</button>
            </div>
            <div class="mt-2">
                @if (deleteStudentsMessage != null)
                {
                    <div class="alert alert-danger">@deleteStudentsMessage</div>
                }
            </div>
        </div>
    </div>

    @* Delete subjects card *@
    <div class="operation-card delete-subjects">
        <div class="operation-header">
            <h4>Clear subjects data</h4>
        </div>
        <div class="operation-body">
            <p>This action will delete all subjects from the database.</p>
            <div class="button-container">
                <button class="btn btn-danger" @onclick="DeleteAllSubjects">Delete</button>
            </div>
            <div class="mt-2">
                @if (deleteSubjectsMessage != null)
                {
                    <div class="alert alert-danger">@deleteSubjectsMessage</div>
                }
            </div>
        </div>
    </div>

    @* Delete employers card *@
    <div class="operation-card delete-employers">
        <div class="operation-header">
            <h4>Clear employers data</h4>
        </div>
        <div class="operation-body">
            <p>This action will delete all employers from the database.</p>
            <div class="button-container">
                <button class="btn btn-danger" @onclick="DeleteAllEmployers">Delete</button>
            </div>
            <div class="mt-2">
                @if (deleteEmployersMessage != null)
                {
                    <div class="alert alert-danger">@deleteEmployersMessage</div>
                }
            </div>
        </div>
    </div>

    @* Create employer card *@
    <div class="operation-card create-employer">
        <div class="operation-header">
            <h4>Create employer</h4>
        </div>
        <div class="operation-body">
            <p>Create a new employer account.</p>
            <div class="button-container">
                <button class="btn btn-primary" @onclick="ShowCreateEmployerModal">Create Employer</button>
            </div>
        </div>
    </div>

    <!-- Change Password Card -->
    <div class="operation-card change-password">
        <div class="operation-header">
            <h4>Change User Password</h4>
        </div>
        <div class="operation-body">
            <p>Change password for a student or employer.</p>
            <EditForm Model="changePasswordModel" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group col-md-4">
                    <label>Username:</label>
                    <InputText class="form-control" @bind-Value="changePasswordModel.Username" />
                </div>
                <div class="form-group col-md-4">
                    <label>New Password:</label>
                    <InputText class="form-control" type="password" @bind-Value="changePasswordModel.NewPassword" />
                </div>
                <div class="form-group centered-input">
                    <label>User Type:</label>
                    <select class="form-control" @bind="changePasswordModel.UserType">
                        <option value="student">Student</option>
                        <option value="employer">Employer</option>
                    </select>
                </div>
                <div class="button-container centered-button">
                    <button class="btn btn-primary" type="submit">Change Password</button>
                </div>
            </EditForm>
            <div class="mt-2">
                @if (changePasswordMessage != null)
                {
                    <div class="alert alert-info">@changePasswordMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@if (isCreateEmployerModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Create Employer</h5>
                <button class="close" @onclick="HideCreateEmployerModal">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="createEmployerModel" OnValidSubmit="CreateEmployer">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Username:</label>
                        <InputText class="form-control" @bind-Value="createEmployerModel.Username" />
                    </div>
                    <div class="form-group">
                        <label>Email:</label>
                        <InputText class="form-control" @bind-Value="createEmployerModel.Email" />
                    </div>
                    <div class="form-group">
                        <label>Password:</label>
                        <InputText class="form-control" type="password" @bind-Value="createEmployerModel.Password" />
                    </div>
                    <div class="form-group">
                        <label>Company Name:</label>
                        <InputText class="form-control" @bind-Value="createEmployerModel.CompanyName" />
                    </div>
                    <div class="form-group">
                        <label>Location:</label>
                        <InputText class="form-control" @bind-Value="createEmployerModel.Location" />
                    </div>
                    <div class="form-group">
                        <label>Phone:</label>
                        <InputText class="form-control" @bind-Value="createEmployerModel.Phone" />
                    </div>
                    <div class="button-container">
                        <button class="btn btn-primary" type="submit">Submit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private string subjectImportMessage;
    private string studentImportMessage;
    private string deleteStudentsMessage;
    private string deleteSubjectsMessage;
    private string changePasswordMessage;
    private string deleteEmployersMessage;
    private bool isCreateEmployerModalVisible = false;
    private CreateEmployerDto createEmployerModel = new CreateEmployerDto();
    private ChangePasswordDto changePasswordModel = new ChangePasswordDto { UserType = "Student" };

    private async Task ImportSubjects()
    {
        var response = await Http.PostAsync("api/systemmanagement/import-subjects-data", null);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ImportResponse>();
            subjectImportMessage = result.Message;
        }
        else
        {
            subjectImportMessage = "Failed to import subjects.";
        }
    }

    private async Task ImportStudents()
    {
        var response = await Http.PostAsync("api/systemmanagement/import-students-data", null);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ImportResponse>();
            studentImportMessage = result.Message;
        }
        else
        {
            studentImportMessage = "Failed to import students.";
        }
    }

    private async Task DeleteAllStudents()
    {
        var response = await Http.DeleteAsync("api/systemmanagement/delete-all-students");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ImportResponse>();
            deleteStudentsMessage = result.Message;
        }
        else
        {
            deleteStudentsMessage = "Failed to delete students.";
        }
    }

    private async Task DeleteAllSubjects()
    {
        var response = await Http.DeleteAsync("api/systemmanagement/delete-all-subjects");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ImportResponse>();
            deleteSubjectsMessage = result.Message;
        }
        else
        {
            deleteSubjectsMessage = "Failed to delete subjects.";
        }
    }

    private async Task DeleteAllEmployers()
    {
        var response = await Http.DeleteAsync("api/systemmanagement/delete-all-employers");

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ImportResponse>();
            deleteEmployersMessage = result.Message;
        }
        else
        {
            deleteEmployersMessage = "Failed to delete employers.";
        }
    }

    private void ShowCreateEmployerModal()
    {
        isCreateEmployerModalVisible = true;
    }

    private void HideCreateEmployerModal()
    {
        isCreateEmployerModalVisible = false;
    }

    private async Task CreateEmployer()
    {
        var response = await Http.PostAsJsonAsync("api/employer/create", createEmployerModel);

        if (response.IsSuccessStatusCode)
        {
            HideCreateEmployerModal();
        }
        else
        {
            // Handle failure
        }
    }

    private async Task ChangePassword()
    {
        var response = await Http.PostAsJsonAsync("api/systemmanagement/change-password", changePasswordModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ChangePasswordResponse>();
            changePasswordMessage = result.Message;
        }
        else
        {
            changePasswordMessage = "Failed to change password.";
        }
    }

    public class ImportResponse
    {
        public string Message { get; set; }
    }

    public class ChangePasswordDto
    {
        public string Username { get; set; }
        public string NewPassword { get; set; }
        public string UserType { get; set; }
    }

    public class ChangePasswordResponse
    {
        public string Message { get; set; }
    }
}