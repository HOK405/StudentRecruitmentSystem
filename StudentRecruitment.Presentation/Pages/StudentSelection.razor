@page "/student-selection"
@using System.Net.Http.Json
@using StudentRecruitment.Presentation.Models
@using StudentRecruitment.Presentation.Services
@using StudentRecruitment.Shared.DTOs
@inject HttpClient Http
@inject TokenService TokenService

<h3 class="text-center">Student Selection</h3>

<div class="container">
    <div class="row justify-content-center mb-3">
        <div class="col-md-12">
            <button class="btn btn-info" @onclick="ToggleInstructions">Show Instructions</button>
            <div class="instructions mt-3 @(showInstructions ? "d-block" : "d-none")">
                <p>
                    Here you can select subjects that are relevant to your vacancy and set their importance. Use the following steps:
                </p>
                <ol>
                    <li>Enter the subject name in the search box and select from the suggestions.</li>
                    <li>Use the slider to set the importance of the subject on a scale of 1 to 10.</li>
                    <li>Click "Add subject" to include additional subjects.</li>
                    <li>Click "Search" to find students matching the selected criteria.</li>
                    <li>Use the "View" button to see detailed information about a student.</li>
                    <li>Also you can add any student to the favourite list, using the "Like" button</li>
                </ol>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        @foreach (var subjectRating in subjectRatings)
        {
            <div class="col-md-4 mb-3">
                <div class="position-relative">
                    <input type="text" @bind="subjectRating.SubjectName" class="form-control" placeholder="Search Subject" @oninput="async e => await SearchSubjects(e, subjectRating)" @onfocus="() => SetActiveSubjectRating(subjectRating)" @onblur="ClearActiveSubjectRating" />
                    @if (activeSubjectRating == subjectRating && subjectSuggestions != null && subjectSuggestions.Any())
                    {
                        <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                            @foreach (var suggestion in subjectSuggestions)
                            {
                                <li class="list-group-item" @onclick="() => SelectSubject(subjectRating, suggestion)">
                                    @suggestion.Name
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="d-flex flex-column align-items-center">
                    <input type="range" @bind="subjectRating.Rating" class="form-range modern-slider" min="1" max="10" step="1" />
                    <span>@subjectRating.Rating</span>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <button class="btn btn-danger w-100" @onclick="() => RemoveSubjectRating(subjectRating)">Remove</button>
            </div>
        }
    </div>
    <div class="row justify-content-center mb-3">
        <div class="col-md-4">
            <button class="btn btn-success action-button w-100" @onclick="AddSubjectRating">Add subject</button>
        </div>
    </div>
    <div class="row justify-content-center mb-3">
        <div class="col-md-4">
            <button class="btn btn-primary action-button w-100" @onclick="SearchStudents">Search</button>
        </div>
    </div>
    @if (students == null)
    {
        <p class="text-center">Please, select subjects, you want to see among candidates</p>
    }
    else if (students.Count == 0)
    {
        <p class="text-center">No students found.</p>
    }
    else
    {
        <table class="table table-striped table-hover animate-fade-in">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Patronimic</th>
                    <th>Birth Date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.Id</td>
                        <td>@student.Name</td>
                        <td>@student.Surname</td>
                        <td>@student.Patronimic</td>
                        <td>@student.BirthDate.ToString("yyyy-MM-dd")</td>
                        <td>
                            <button class="btn btn-info me-2" @onclick="() => ShowStudentInfo(student.Id)">
                                <i class="bi bi-search"></i> View
                            </button>
                            @if (role != "Admin")
                            {
                                <button class="btn btn-success" @onclick="() => LikeStudent(student.Id)">
                                    <i class="bi bi-heart-fill"></i> Like
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

@* Modal *@
<div class="modal fade @(isModalVisible ? "show d-block" : "d-none")" tabindex="-1" role="dialog" aria-labelledby="studentInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentInfoModalLabel">Student Information</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (modalErrorMessage != null)
                {
                    <div class="alert alert-danger">@modalErrorMessage</div>
                }
                else if (modalStudentInfo != null && groupedSemesterGrades != null)
                {
                    <div>
                        <h4>Student Details</h4>
                        <p>Name: @modalStudentInfo.Name</p>
                        <p>Surname: @modalStudentInfo.Surname</p>
                        <p>Patronimic: @modalStudentInfo.Patronimic</p>
                        <p>Description: @modalStudentInfo.Description</p>
                        <p>Birth Date: @modalStudentInfo.BirthDate.ToShortDateString()</p>
                        <p>Email: @modalStudentInfo.Email</p>

                        <h4>Semester Grades</h4>
                        @foreach (var semester in groupedSemesterGrades.Keys.OrderByDescending(k => k))
                        {
                            <h5>Semester @semester</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Subject</th>
                                        <th>Grade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var grade in groupedSemesterGrades[semester])
                                    {
                                        <tr>
                                            <td>@grade.SubjectName</td>
                                            <td>@grade.Grade</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<StudentModel> students;
    private int totalCount;
    private int pageNumber = 1;
    private int pageSize = 200;
    private List<SubjectRatingModel> subjectRatings = new List<SubjectRatingModel>
    {
        new SubjectRatingModel { Rating = 1 }
    };

    private StudentWithGradesModel modalStudentInfo;
    private bool isModalVisible = false;
    private string modalErrorMessage;
    private string role;
    private bool isAuthenticated;

    private Dictionary<int, List<SemesterGrade>> groupedSemesterGrades;
    private List<SubjectModel> subjectSuggestions;
    private SubjectRatingModel activeSubjectRating;
    private bool showInstructions = false;

    protected override void OnInitialized()
    {
        // Initialization logic
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TokenService.InitializeAsync();
            isAuthenticated = await TokenService.IsAuthenticatedAsync();
            role = await TokenService.GetUserRoleAsync();
            StateHasChanged();
        }
    }

    public async Task SearchStudents()
    {
        var response = await Http.PostAsJsonAsync($"api/student/get-students-rating?pageNumber={pageNumber}&pageSize={pageSize}", subjectRatings);

        if (response.IsSuccessStatusCode)
        {
            var pagedData = await response.Content.ReadFromJsonAsync<PagedDataModel<StudentModel>>();
            students = pagedData.Results;
            totalCount = pagedData.TotalCount;
        }
        else
        {
            students = new List<StudentModel>();
        }
    }

    private void AddSubjectRating()
    {
        subjectRatings.Add(new SubjectRatingModel { Rating = 1 });
    }

    private void RemoveSubjectRating(SubjectRatingModel subjectRating)
    {
        subjectRatings.Remove(subjectRating);
    }

    private async Task ShowStudentInfo(int studentId)
    {
        isModalVisible = true;
        modalErrorMessage = null;
        groupedSemesterGrades = new Dictionary<int, List<SemesterGrade>>();

        try
        {
            modalStudentInfo = await Http.GetFromJsonAsync<StudentWithGradesModel>($"api/student/{studentId}/grades");
            if (modalStudentInfo == null)
            {
                modalErrorMessage = "Student not found.";
            }
            else
            {
                groupedSemesterGrades = modalStudentInfo.SemesterGrades
                    .GroupBy(g => g.Semester)
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (HttpRequestException)
        {
            modalErrorMessage = "Error fetching student information. Please try again.";
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
        modalStudentInfo = null;
    }

    private async Task SearchSubjects(ChangeEventArgs e, SubjectRatingModel subjectRating)
    {
        string query = e.Value.ToString();
        if (!string.IsNullOrEmpty(query))
        {
            var response = await Http.GetFromJsonAsync<List<SubjectModel>>($"api/subject/search-subjects?query={query}");
            subjectSuggestions = response;
            activeSubjectRating = subjectRating;
        }
        else
        {
            subjectSuggestions = null;
            activeSubjectRating = null;
        }
    }

    private void SetActiveSubjectRating(SubjectRatingModel subjectRating)
    {
        activeSubjectRating = subjectRating;
    }

    private void ClearActiveSubjectRating()
    {
        // Delay to allow selection
        Task.Delay(200).ContinueWith(_ =>
        {
            if (activeSubjectRating != null)
            {
                InvokeAsync(() => activeSubjectRating = null);
            }
        });
    }

    private void SelectSubject(SubjectRatingModel subjectRating, SubjectModel selectedSubject)
    {
        subjectRating.SubjectId = selectedSubject.Id;
        subjectRating.SubjectName = selectedSubject.Name;
        subjectSuggestions = null;
        activeSubjectRating = null;
    }

    private async Task LikeStudent(int studentId)
    {
        var employerId = await TokenService.GetUserIdAsync();
        await TokenService.LikeStudentAsync(new LikeStudentDto()
            {
                EmployerId = employerId,
                StudentId = studentId
            });
    }

    private void ToggleInstructions()
    {
        showInstructions = !showInstructions;
    }
}