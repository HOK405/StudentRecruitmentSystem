@page "/student-selection"
@using System.Net.Http.Json
@using StudentRecruitment.Presentation.Models
@using StudentRecruitment.Presentation.Services
@using StudentRecruitment.Shared.DTOs
@inject HttpClient Http
@inject TokenService TokenService

<h3>Student Selection</h3>

<div class="row">
    @foreach (var subjectRating in subjectRatings)
    {
        <div class="col-md-4">
            <div class="position-relative">
                <input type="text" @bind="subjectRating.SubjectName" class="form-control" placeholder="Search Subject" @oninput="async e => await SearchSubjects(e, subjectRating)" @onfocus="() => SetActiveSubjectRating(subjectRating)" @onblur="ClearActiveSubjectRating" />
                @if (activeSubjectRating == subjectRating && subjectSuggestions != null && subjectSuggestions.Any())
                {
                    <ul class="list-group position-absolute w-100" style="z-index: 1000;">
                        @foreach (var suggestion in subjectSuggestions)
                        {
                            <li class="list-group-item" @onclick="() => SelectSubject(subjectRating, suggestion)">
                                @suggestion.Name
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
        <div class="col-md-4">
            <input type="number" @bind="subjectRating.Rating" class="form-control" placeholder="Rating" />
        </div>
        <div class="col-md-4">
            <button class="btn btn-danger" @onclick="() => RemoveSubjectRating(subjectRating)">Remove</button>
        </div>
    }
</div>
<div class="row">
    <div class="col-md-4">
        <button class="btn btn-success" @onclick="AddSubjectRating">Add Another Subject</button>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <button class="btn btn-primary" @onclick="SearchStudents">Search</button>
    </div>
</div>

@if (students == null)
{
    <p>Loading...</p>
}
else if (students.Count == 0)
{
    <p>No students found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Patronimic</th>
                <th>Birth Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.Name</td>
                    <td>@student.Surname</td>
                    <td>@student.Patronimic</td>
                    <td>@student.BirthDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ShowStudentInfo(student.Id)">View</button>
                        <button class="btn btn-success" @onclick="() => LikeStudent(student.Id)">Like</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* Modal *@
<div class="modal fade @(isModalVisible ? "show d-block" : "d-none")" tabindex="-1" role="dialog" aria-labelledby="studentInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="studentInfoModalLabel">Student Information</h5>
                <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (modalErrorMessage != null)
                {
                    <div class="alert alert-danger">@modalErrorMessage</div>
                }
                else if (modalStudentInfo != null && groupedSemesterGrades != null)
                {
                    <div>
                        <h4>Student Details</h4>
                        <p>Name: @modalStudentInfo.Name</p>
                        <p>Surname: @modalStudentInfo.Surname</p>
                        <p>Patronimic: @modalStudentInfo.Patronimic</p>
                        <p>Description: @modalStudentInfo.Description</p>
                        <p>Birth Date: @modalStudentInfo.BirthDate.ToShortDateString()</p>
                        <p>Email: @modalStudentInfo.Email</p>

                        <h4>Semester Grades</h4>
                        @foreach (var semester in groupedSemesterGrades.Keys.OrderByDescending(k => k))
                        {
                            <h5>Semester @semester</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Subject</th>
                                        <th>Grade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var grade in groupedSemesterGrades[semester])
                                    {
                                        <tr>
                                            <td>@grade.SubjectName</td>
                                            <td>@grade.Grade</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>

        </div>
    </div>
</div>

@code {
    private List<StudentModel> students;
    private int totalCount;
    private int pageNumber = 1;
    private int pageSize = 200;
    private List<SubjectRatingModel> subjectRatings = new List<SubjectRatingModel>
    {
        new SubjectRatingModel { }
    };

    private StudentWithGradesModel modalStudentInfo;
    private bool isModalVisible = false;
    private string modalErrorMessage;

    private Dictionary<int, List<SemesterGrade>> groupedSemesterGrades;
    private List<SubjectModel> subjectSuggestions;
    private SubjectRatingModel activeSubjectRating;

    public async Task SearchStudents()
    {
        var response = await Http.PostAsJsonAsync($"api/student/get-students-rating?pageNumber={pageNumber}&pageSize={pageSize}", subjectRatings);

        if (response.IsSuccessStatusCode)
        {
            var pagedData = await response.Content.ReadFromJsonAsync<PagedDataModel<StudentModel>>();
            students = pagedData.Results;
            totalCount = pagedData.TotalCount;
        }
        else
        {
            students = new List<StudentModel>();
        }
    }

    private void AddSubjectRating()
    {
        subjectRatings.Add(new SubjectRatingModel());
    }

    private void RemoveSubjectRating(SubjectRatingModel subjectRating)
    {
        subjectRatings.Remove(subjectRating);
    }

    private async Task ShowStudentInfo(int studentId)
    {
        isModalVisible = true;
        modalErrorMessage = null;
        groupedSemesterGrades = new Dictionary<int, List<SemesterGrade>>();

        try
        {
            modalStudentInfo = await Http.GetFromJsonAsync<StudentWithGradesModel>($"api/student/{studentId}/grades");
            if (modalStudentInfo == null)
            {
                modalErrorMessage = "Student not found.";
            }
            else
            {
                groupedSemesterGrades = modalStudentInfo.SemesterGrades
                    .GroupBy(g => g.Semester)
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (HttpRequestException)
        {
            modalErrorMessage = "Error fetching student information. Please try again.";
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
        modalStudentInfo = null;
    }

    private async Task SearchSubjects(ChangeEventArgs e, SubjectRatingModel subjectRating)
    {
        string query = e.Value.ToString();
        if (!string.IsNullOrEmpty(query))
        {
            var response = await Http.GetFromJsonAsync<List<SubjectModel>>($"api/subject/search-subjects?query={query}");
            subjectSuggestions = response;
            activeSubjectRating = subjectRating;
        }
        else
        {
            subjectSuggestions = null;
            activeSubjectRating = null;
        }
    }

    private void SetActiveSubjectRating(SubjectRatingModel subjectRating)
    {
        activeSubjectRating = subjectRating;
    }

    private void ClearActiveSubjectRating()
    {
        // Delay to allow selection
        Task.Delay(200).ContinueWith(_ =>
        {
            if (activeSubjectRating != null)
            {
                InvokeAsync(() => activeSubjectRating = null);
            }
        });
    }

    private void SelectSubject(SubjectRatingModel subjectRating, SubjectModel selectedSubject)
    {
        subjectRating.SubjectId = selectedSubject.Id;
        subjectRating.SubjectName = selectedSubject.Name;
        subjectSuggestions = null;
        activeSubjectRating = null;
    }

    private async Task LikeStudent(int studentId)
    {
        var employerId = await TokenService.GetUserIdAsync();
        await TokenService.LikeStudentAsync(new LikeStudentDto()
            {
                EmployerId = employerId,
                StudentId = studentId
            });
    }
}
